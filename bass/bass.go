// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Sun, 03 Oct 2021 20:25:20 CEST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package bass

/*
#include "../include/bass.h"
#include "../include/bassenc.h"
#include "../include/bassenc_mp3.h"
#include "../include/bassmix.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// BassSetconfig function as declared in include/bass.h:973
func BassSetconfig(option uint32, value uint32) int32 {
	coption, coptionAllocMap := (C.DWORD)(option), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.DWORD)(value), cgoAllocsUnknown
	__ret := C.BASS_SetConfig(coption, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(coptionAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassGetconfig function as declared in include/bass.h:974
func BassGetconfig(option uint32) uint32 {
	coption, coptionAllocMap := (C.DWORD)(option), cgoAllocsUnknown
	__ret := C.BASS_GetConfig(coption)
	runtime.KeepAlive(coptionAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassSetconfigptr function as declared in include/bass.h:975
func BassSetconfigptr(option uint32, value unsafe.Pointer) int32 {
	coption, coptionAllocMap := (C.DWORD)(option), cgoAllocsUnknown
	cvalue, cvalueAllocMap := value, cgoAllocsUnknown
	__ret := C.BASS_SetConfigPtr(coption, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(coptionAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassGetconfigptr function as declared in include/bass.h:976
func BassGetconfigptr(option uint32) unsafe.Pointer {
	coption, coptionAllocMap := (C.DWORD)(option), cgoAllocsUnknown
	__ret := C.BASS_GetConfigPtr(coption)
	runtime.KeepAlive(coptionAllocMap)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// BassGetversion function as declared in include/bass.h:977
func BassGetversion() uint32 {
	__ret := C.BASS_GetVersion()
	__v := (uint32)(__ret)
	return __v
}

// BassErrorgetcode function as declared in include/bass.h:978
func BassErrorgetcode() int32 {
	__ret := C.BASS_ErrorGetCode()
	__v := (int32)(__ret)
	return __v
}

// BassGetdeviceinfo function as declared in include/bass.h:980
func BassGetdeviceinfo(device uint32, info *BassDeviceinfo) int32 {
	cdevice, cdeviceAllocMap := (C.DWORD)(device), cgoAllocsUnknown
	cinfo, cinfoAllocMap := info.PassRef()
	__ret := C.BASS_GetDeviceInfo(cdevice, cinfo)
	runtime.KeepAlive(cinfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassInit function as declared in include/bass.h:984
func BassInit(device int32, freq uint32, flags uint32, win unsafe.Pointer, dsguid unsafe.Pointer) int32 {
	cdevice, cdeviceAllocMap := (C.int)(device), cgoAllocsUnknown
	cfreq, cfreqAllocMap := (C.DWORD)(freq), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	cwin, cwinAllocMap := win, cgoAllocsUnknown
	cdsguid, cdsguidAllocMap := dsguid, cgoAllocsUnknown
	__ret := C.BASS_Init(cdevice, cfreq, cflags, cwin, cdsguid)
	runtime.KeepAlive(cdsguidAllocMap)
	runtime.KeepAlive(cwinAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cfreqAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassFree function as declared in include/bass.h:986
func BassFree() int32 {
	__ret := C.BASS_Free()
	__v := (int32)(__ret)
	return __v
}

// BassSetdevice function as declared in include/bass.h:987
func BassSetdevice(device uint32) int32 {
	cdevice, cdeviceAllocMap := (C.DWORD)(device), cgoAllocsUnknown
	__ret := C.BASS_SetDevice(cdevice)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassGetdevice function as declared in include/bass.h:988
func BassGetdevice() uint32 {
	__ret := C.BASS_GetDevice()
	__v := (uint32)(__ret)
	return __v
}

// BassGetinfo function as declared in include/bass.h:989
func BassGetinfo(info *BassInfo) int32 {
	cinfo, cinfoAllocMap := info.PassRef()
	__ret := C.BASS_GetInfo(cinfo)
	runtime.KeepAlive(cinfoAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassStart function as declared in include/bass.h:990
func BassStart() int32 {
	__ret := C.BASS_Start()
	__v := (int32)(__ret)
	return __v
}

// BassStop function as declared in include/bass.h:991
func BassStop() int32 {
	__ret := C.BASS_Stop()
	__v := (int32)(__ret)
	return __v
}

// BassPause function as declared in include/bass.h:992
func BassPause() int32 {
	__ret := C.BASS_Pause()
	__v := (int32)(__ret)
	return __v
}

// BassIsstarted function as declared in include/bass.h:993
func BassIsstarted() uint32 {
	__ret := C.BASS_IsStarted()
	__v := (uint32)(__ret)
	return __v
}

// BassUpdate function as declared in include/bass.h:994
func BassUpdate(length uint32) int32 {
	clength, clengthAllocMap := (C.DWORD)(length), cgoAllocsUnknown
	__ret := C.BASS_Update(clength)
	runtime.KeepAlive(clengthAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassGetcpu function as declared in include/bass.h:995
func BassGetcpu() float32 {
	__ret := C.BASS_GetCPU()
	__v := (float32)(__ret)
	return __v
}

// BassSetvolume function as declared in include/bass.h:996
func BassSetvolume(volume float32) int32 {
	cvolume, cvolumeAllocMap := (C.float)(volume), cgoAllocsUnknown
	__ret := C.BASS_SetVolume(cvolume)
	runtime.KeepAlive(cvolumeAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassGetvolume function as declared in include/bass.h:997
func BassGetvolume() float32 {
	__ret := C.BASS_GetVolume()
	__v := (float32)(__ret)
	return __v
}

// BassSet3dfactors function as declared in include/bass.h:1002
func BassSet3dfactors(distf float32, rollf float32, doppf float32) int32 {
	cdistf, cdistfAllocMap := (C.float)(distf), cgoAllocsUnknown
	crollf, crollfAllocMap := (C.float)(rollf), cgoAllocsUnknown
	cdoppf, cdoppfAllocMap := (C.float)(doppf), cgoAllocsUnknown
	__ret := C.BASS_Set3DFactors(cdistf, crollf, cdoppf)
	runtime.KeepAlive(cdoppfAllocMap)
	runtime.KeepAlive(crollfAllocMap)
	runtime.KeepAlive(cdistfAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassGet3dfactors function as declared in include/bass.h:1003
func BassGet3dfactors(distf *float32, rollf *float32, doppf *float32) int32 {
	cdistf, cdistfAllocMap := (*C.float)(unsafe.Pointer(distf)), cgoAllocsUnknown
	crollf, crollfAllocMap := (*C.float)(unsafe.Pointer(rollf)), cgoAllocsUnknown
	cdoppf, cdoppfAllocMap := (*C.float)(unsafe.Pointer(doppf)), cgoAllocsUnknown
	__ret := C.BASS_Get3DFactors(cdistf, crollf, cdoppf)
	runtime.KeepAlive(cdoppfAllocMap)
	runtime.KeepAlive(crollfAllocMap)
	runtime.KeepAlive(cdistfAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassSet3dposition function as declared in include/bass.h:1004
func BassSet3dposition(pos *Bass3dvector, vel *Bass3dvector, front *Bass3dvector, top *Bass3dvector) int32 {
	cpos, cposAllocMap := pos.PassRef()
	cvel, cvelAllocMap := vel.PassRef()
	cfront, cfrontAllocMap := front.PassRef()
	ctop, ctopAllocMap := top.PassRef()
	__ret := C.BASS_Set3DPosition(cpos, cvel, cfront, ctop)
	runtime.KeepAlive(ctopAllocMap)
	runtime.KeepAlive(cfrontAllocMap)
	runtime.KeepAlive(cvelAllocMap)
	runtime.KeepAlive(cposAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassGet3dposition function as declared in include/bass.h:1005
func BassGet3dposition(pos *Bass3dvector, vel *Bass3dvector, front *Bass3dvector, top *Bass3dvector) int32 {
	cpos, cposAllocMap := pos.PassRef()
	cvel, cvelAllocMap := vel.PassRef()
	cfront, cfrontAllocMap := front.PassRef()
	ctop, ctopAllocMap := top.PassRef()
	__ret := C.BASS_Get3DPosition(cpos, cvel, cfront, ctop)
	runtime.KeepAlive(ctopAllocMap)
	runtime.KeepAlive(cfrontAllocMap)
	runtime.KeepAlive(cvelAllocMap)
	runtime.KeepAlive(cposAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassApply3d function as declared in include/bass.h:1006
func BassApply3d() {
	C.BASS_Apply3D()
}

// BassPluginload function as declared in include/bass.h:1008
func BassPluginload(file string, flags uint32) uint32 {
	cfile, cfileAllocMap := unpackPCharString(file)
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	__ret := C.BASS_PluginLoad(cfile, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cfileAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassPluginfree function as declared in include/bass.h:1009
func BassPluginfree(handle uint32) int32 {
	chandle, chandleAllocMap := (C.HPLUGIN)(handle), cgoAllocsUnknown
	__ret := C.BASS_PluginFree(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassPluginenable function as declared in include/bass.h:1010
func BassPluginenable(handle uint32, enable int32) int32 {
	chandle, chandleAllocMap := (C.HPLUGIN)(handle), cgoAllocsUnknown
	cenable, cenableAllocMap := (C.BOOL)(enable), cgoAllocsUnknown
	__ret := C.BASS_PluginEnable(chandle, cenable)
	runtime.KeepAlive(cenableAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassPlugingetinfo function as declared in include/bass.h:1011
func BassPlugingetinfo(handle uint32) *BassPlugininfo {
	chandle, chandleAllocMap := (C.HPLUGIN)(handle), cgoAllocsUnknown
	__ret := C.BASS_PluginGetInfo(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := NewBassPlugininfoRef(unsafe.Pointer(__ret))
	return __v
}

// BassSampleload function as declared in include/bass.h:1013
func BassSampleload(mem int32, file unsafe.Pointer, offset uint64, length uint32, max uint32, flags uint32) uint32 {
	cmem, cmemAllocMap := (C.BOOL)(mem), cgoAllocsUnknown
	cfile, cfileAllocMap := file, cgoAllocsUnknown
	coffset, coffsetAllocMap := (C.QWORD)(offset), cgoAllocsUnknown
	clength, clengthAllocMap := (C.DWORD)(length), cgoAllocsUnknown
	cmax, cmaxAllocMap := (C.DWORD)(max), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	__ret := C.BASS_SampleLoad(cmem, cfile, coffset, clength, cmax, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(coffsetAllocMap)
	runtime.KeepAlive(cfileAllocMap)
	runtime.KeepAlive(cmemAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassSamplecreate function as declared in include/bass.h:1014
func BassSamplecreate(length uint32, freq uint32, chans uint32, max uint32, flags uint32) uint32 {
	clength, clengthAllocMap := (C.DWORD)(length), cgoAllocsUnknown
	cfreq, cfreqAllocMap := (C.DWORD)(freq), cgoAllocsUnknown
	cchans, cchansAllocMap := (C.DWORD)(chans), cgoAllocsUnknown
	cmax, cmaxAllocMap := (C.DWORD)(max), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	__ret := C.BASS_SampleCreate(clength, cfreq, cchans, cmax, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(cchansAllocMap)
	runtime.KeepAlive(cfreqAllocMap)
	runtime.KeepAlive(clengthAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassSamplefree function as declared in include/bass.h:1015
func BassSamplefree(handle uint32) int32 {
	chandle, chandleAllocMap := (C.HSAMPLE)(handle), cgoAllocsUnknown
	__ret := C.BASS_SampleFree(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassSamplesetdata function as declared in include/bass.h:1016
func BassSamplesetdata(handle uint32, buffer unsafe.Pointer) int32 {
	chandle, chandleAllocMap := (C.HSAMPLE)(handle), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := buffer, cgoAllocsUnknown
	__ret := C.BASS_SampleSetData(chandle, cbuffer)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassSamplegetdata function as declared in include/bass.h:1017
func BassSamplegetdata(handle uint32, buffer unsafe.Pointer) int32 {
	chandle, chandleAllocMap := (C.HSAMPLE)(handle), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := buffer, cgoAllocsUnknown
	__ret := C.BASS_SampleGetData(chandle, cbuffer)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassSamplegetinfo function as declared in include/bass.h:1018
func BassSamplegetinfo(handle uint32, info *BassSample) int32 {
	chandle, chandleAllocMap := (C.HSAMPLE)(handle), cgoAllocsUnknown
	cinfo, cinfoAllocMap := info.PassRef()
	__ret := C.BASS_SampleGetInfo(chandle, cinfo)
	runtime.KeepAlive(cinfoAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassSamplesetinfo function as declared in include/bass.h:1019
func BassSamplesetinfo(handle uint32, info *BassSample) int32 {
	chandle, chandleAllocMap := (C.HSAMPLE)(handle), cgoAllocsUnknown
	cinfo, cinfoAllocMap := info.PassRef()
	__ret := C.BASS_SampleSetInfo(chandle, cinfo)
	runtime.KeepAlive(cinfoAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassSamplegetchannel function as declared in include/bass.h:1020
func BassSamplegetchannel(handle uint32, flags uint32) uint32 {
	chandle, chandleAllocMap := (C.HSAMPLE)(handle), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	__ret := C.BASS_SampleGetChannel(chandle, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassSamplegetchannels function as declared in include/bass.h:1021
func BassSamplegetchannels(handle uint32, channels *uint32) uint32 {
	chandle, chandleAllocMap := (C.HSAMPLE)(handle), cgoAllocsUnknown
	cchannels, cchannelsAllocMap := (*C.HCHANNEL)(unsafe.Pointer(channels)), cgoAllocsUnknown
	__ret := C.BASS_SampleGetChannels(chandle, cchannels)
	runtime.KeepAlive(cchannelsAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassSamplestop function as declared in include/bass.h:1022
func BassSamplestop(handle uint32) int32 {
	chandle, chandleAllocMap := (C.HSAMPLE)(handle), cgoAllocsUnknown
	__ret := C.BASS_SampleStop(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassStreamcreate function as declared in include/bass.h:1024
func BassStreamcreate(freq uint32, chans uint32, flags uint32, proc Streamproc, user unsafe.Pointer) uint32 {
	cfreq, cfreqAllocMap := (C.DWORD)(freq), cgoAllocsUnknown
	cchans, cchansAllocMap := (C.DWORD)(chans), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	cproc, cprocAllocMap := proc.PassRef()
	cuser, cuserAllocMap := user, cgoAllocsUnknown
	__ret := C.BASS_StreamCreate(cfreq, cchans, cflags, cproc, cuser)
	runtime.KeepAlive(cuserAllocMap)
	runtime.KeepAlive(cprocAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cchansAllocMap)
	runtime.KeepAlive(cfreqAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassStreamcreatefile function as declared in include/bass.h:1025
func BassStreamcreatefile(mem int32, file unsafe.Pointer, offset uint64, length uint64, flags uint32) uint32 {
	cmem, cmemAllocMap := (C.BOOL)(mem), cgoAllocsUnknown
	cfile, cfileAllocMap := file, cgoAllocsUnknown
	coffset, coffsetAllocMap := (C.QWORD)(offset), cgoAllocsUnknown
	clength, clengthAllocMap := (C.QWORD)(length), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	__ret := C.BASS_StreamCreateFile(cmem, cfile, coffset, clength, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(coffsetAllocMap)
	runtime.KeepAlive(cfileAllocMap)
	runtime.KeepAlive(cmemAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassStreamcreateurl function as declared in include/bass.h:1026
func BassStreamcreateurl(url string, offset uint32, flags uint32, proc Downloadproc, user unsafe.Pointer) uint32 {
	curl, curlAllocMap := unpackPCharString(url)
	coffset, coffsetAllocMap := (C.DWORD)(offset), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	cproc, cprocAllocMap := proc.PassRef()
	cuser, cuserAllocMap := user, cgoAllocsUnknown
	__ret := C.BASS_StreamCreateURL(curl, coffset, cflags, cproc, cuser)
	runtime.KeepAlive(cuserAllocMap)
	runtime.KeepAlive(cprocAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(coffsetAllocMap)
	runtime.KeepAlive(curlAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassStreamcreatefileuser function as declared in include/bass.h:1027
func BassStreamcreatefileuser(system uint32, flags uint32, proc *BassFileprocs, user unsafe.Pointer) uint32 {
	csystem, csystemAllocMap := (C.DWORD)(system), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	cproc, cprocAllocMap := proc.PassRef()
	cuser, cuserAllocMap := user, cgoAllocsUnknown
	__ret := C.BASS_StreamCreateFileUser(csystem, cflags, cproc, cuser)
	runtime.KeepAlive(cuserAllocMap)
	runtime.KeepAlive(cprocAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(csystemAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassStreamfree function as declared in include/bass.h:1028
func BassStreamfree(handle uint32) int32 {
	chandle, chandleAllocMap := (C.HSTREAM)(handle), cgoAllocsUnknown
	__ret := C.BASS_StreamFree(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassStreamgetfileposition function as declared in include/bass.h:1029
func BassStreamgetfileposition(handle uint32, mode uint32) uint64 {
	chandle, chandleAllocMap := (C.HSTREAM)(handle), cgoAllocsUnknown
	cmode, cmodeAllocMap := (C.DWORD)(mode), cgoAllocsUnknown
	__ret := C.BASS_StreamGetFilePosition(chandle, cmode)
	runtime.KeepAlive(cmodeAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// BassStreamputdata function as declared in include/bass.h:1030
func BassStreamputdata(handle uint32, buffer unsafe.Pointer, length uint32) uint32 {
	chandle, chandleAllocMap := (C.HSTREAM)(handle), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := buffer, cgoAllocsUnknown
	clength, clengthAllocMap := (C.DWORD)(length), cgoAllocsUnknown
	__ret := C.BASS_StreamPutData(chandle, cbuffer, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassStreamputfiledata function as declared in include/bass.h:1031
func BassStreamputfiledata(handle uint32, buffer unsafe.Pointer, length uint32) uint32 {
	chandle, chandleAllocMap := (C.HSTREAM)(handle), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := buffer, cgoAllocsUnknown
	clength, clengthAllocMap := (C.DWORD)(length), cgoAllocsUnknown
	__ret := C.BASS_StreamPutFileData(chandle, cbuffer, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassMusicload function as declared in include/bass.h:1033
func BassMusicload(mem int32, file unsafe.Pointer, offset uint64, length uint32, flags uint32, freq uint32) uint32 {
	cmem, cmemAllocMap := (C.BOOL)(mem), cgoAllocsUnknown
	cfile, cfileAllocMap := file, cgoAllocsUnknown
	coffset, coffsetAllocMap := (C.QWORD)(offset), cgoAllocsUnknown
	clength, clengthAllocMap := (C.DWORD)(length), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	cfreq, cfreqAllocMap := (C.DWORD)(freq), cgoAllocsUnknown
	__ret := C.BASS_MusicLoad(cmem, cfile, coffset, clength, cflags, cfreq)
	runtime.KeepAlive(cfreqAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(coffsetAllocMap)
	runtime.KeepAlive(cfileAllocMap)
	runtime.KeepAlive(cmemAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassMusicfree function as declared in include/bass.h:1034
func BassMusicfree(handle uint32) int32 {
	chandle, chandleAllocMap := (C.HMUSIC)(handle), cgoAllocsUnknown
	__ret := C.BASS_MusicFree(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassRecordgetdeviceinfo function as declared in include/bass.h:1036
func BassRecordgetdeviceinfo(device uint32, info *BassDeviceinfo) int32 {
	cdevice, cdeviceAllocMap := (C.DWORD)(device), cgoAllocsUnknown
	cinfo, cinfoAllocMap := info.PassRef()
	__ret := C.BASS_RecordGetDeviceInfo(cdevice, cinfo)
	runtime.KeepAlive(cinfoAllocMap)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassRecordinit function as declared in include/bass.h:1037
func BassRecordinit(device int32) int32 {
	cdevice, cdeviceAllocMap := (C.int)(device), cgoAllocsUnknown
	__ret := C.BASS_RecordInit(cdevice)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassRecordfree function as declared in include/bass.h:1038
func BassRecordfree() int32 {
	__ret := C.BASS_RecordFree()
	__v := (int32)(__ret)
	return __v
}

// BassRecordsetdevice function as declared in include/bass.h:1039
func BassRecordsetdevice(device uint32) int32 {
	cdevice, cdeviceAllocMap := (C.DWORD)(device), cgoAllocsUnknown
	__ret := C.BASS_RecordSetDevice(cdevice)
	runtime.KeepAlive(cdeviceAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassRecordgetdevice function as declared in include/bass.h:1040
func BassRecordgetdevice() uint32 {
	__ret := C.BASS_RecordGetDevice()
	__v := (uint32)(__ret)
	return __v
}

// BassRecordgetinfo function as declared in include/bass.h:1041
func BassRecordgetinfo(info *BassRecordinfo) int32 {
	cinfo, cinfoAllocMap := info.PassRef()
	__ret := C.BASS_RecordGetInfo(cinfo)
	runtime.KeepAlive(cinfoAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassRecordgetinputname function as declared in include/bass.h:1042
func BassRecordgetinputname(input int32) string {
	cinput, cinputAllocMap := (C.int)(input), cgoAllocsUnknown
	__ret := C.BASS_RecordGetInputName(cinput)
	runtime.KeepAlive(cinputAllocMap)
	__v := packPCharString(__ret)
	return __v
}

// BassRecordsetinput function as declared in include/bass.h:1043
func BassRecordsetinput(input int32, flags uint32, volume float32) int32 {
	cinput, cinputAllocMap := (C.int)(input), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	cvolume, cvolumeAllocMap := (C.float)(volume), cgoAllocsUnknown
	__ret := C.BASS_RecordSetInput(cinput, cflags, cvolume)
	runtime.KeepAlive(cvolumeAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cinputAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassRecordgetinput function as declared in include/bass.h:1044
func BassRecordgetinput(input int32, volume *float32) uint32 {
	cinput, cinputAllocMap := (C.int)(input), cgoAllocsUnknown
	cvolume, cvolumeAllocMap := (*C.float)(unsafe.Pointer(volume)), cgoAllocsUnknown
	__ret := C.BASS_RecordGetInput(cinput, cvolume)
	runtime.KeepAlive(cvolumeAllocMap)
	runtime.KeepAlive(cinputAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassRecordstart function as declared in include/bass.h:1045
func BassRecordstart(freq uint32, chans uint32, flags uint32, proc Recordproc, user unsafe.Pointer) uint32 {
	cfreq, cfreqAllocMap := (C.DWORD)(freq), cgoAllocsUnknown
	cchans, cchansAllocMap := (C.DWORD)(chans), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	cproc, cprocAllocMap := proc.PassRef()
	cuser, cuserAllocMap := user, cgoAllocsUnknown
	__ret := C.BASS_RecordStart(cfreq, cchans, cflags, cproc, cuser)
	runtime.KeepAlive(cuserAllocMap)
	runtime.KeepAlive(cprocAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cchansAllocMap)
	runtime.KeepAlive(cfreqAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassChannelbytes2seconds function as declared in include/bass.h:1047
func BassChannelbytes2seconds(handle uint32, pos uint64) float64 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cpos, cposAllocMap := (C.QWORD)(pos), cgoAllocsUnknown
	__ret := C.BASS_ChannelBytes2Seconds(chandle, cpos)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (float64)(__ret)
	return __v
}

// BassChannelseconds2bytes function as declared in include/bass.h:1048
func BassChannelseconds2bytes(handle uint32, pos float64) uint64 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cpos, cposAllocMap := (C.double)(pos), cgoAllocsUnknown
	__ret := C.BASS_ChannelSeconds2Bytes(chandle, cpos)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// BassChannelgetdevice function as declared in include/bass.h:1049
func BassChannelgetdevice(handle uint32) uint32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	__ret := C.BASS_ChannelGetDevice(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassChannelsetdevice function as declared in include/bass.h:1050
func BassChannelsetdevice(handle uint32, device uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cdevice, cdeviceAllocMap := (C.DWORD)(device), cgoAllocsUnknown
	__ret := C.BASS_ChannelSetDevice(chandle, cdevice)
	runtime.KeepAlive(cdeviceAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelisactive function as declared in include/bass.h:1051
func BassChannelisactive(handle uint32) uint32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	__ret := C.BASS_ChannelIsActive(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassChannelgetinfo function as declared in include/bass.h:1052
func BassChannelgetinfo(handle uint32, info *BassChannelinfo) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cinfo, cinfoAllocMap := info.PassRef()
	__ret := C.BASS_ChannelGetInfo(chandle, cinfo)
	runtime.KeepAlive(cinfoAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelgettags function as declared in include/bass.h:1053
func BassChannelgettags(handle uint32, tags uint32) string {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	ctags, ctagsAllocMap := (C.DWORD)(tags), cgoAllocsUnknown
	__ret := C.BASS_ChannelGetTags(chandle, ctags)
	runtime.KeepAlive(ctagsAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := packPCharString(__ret)
	return __v
}

// BassChannelflags function as declared in include/bass.h:1054
func BassChannelflags(handle uint32, flags uint32, mask uint32) uint32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	cmask, cmaskAllocMap := (C.DWORD)(mask), cgoAllocsUnknown
	__ret := C.BASS_ChannelFlags(chandle, cflags, cmask)
	runtime.KeepAlive(cmaskAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassChannellock function as declared in include/bass.h:1055
func BassChannellock(handle uint32, lock int32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	clock, clockAllocMap := (C.BOOL)(lock), cgoAllocsUnknown
	__ret := C.BASS_ChannelLock(chandle, clock)
	runtime.KeepAlive(clockAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelfree function as declared in include/bass.h:1056
func BassChannelfree(handle uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	__ret := C.BASS_ChannelFree(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelplay function as declared in include/bass.h:1057
func BassChannelplay(handle uint32, restart int32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	crestart, crestartAllocMap := (C.BOOL)(restart), cgoAllocsUnknown
	__ret := C.BASS_ChannelPlay(chandle, crestart)
	runtime.KeepAlive(crestartAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelstop function as declared in include/bass.h:1058
func BassChannelstop(handle uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	__ret := C.BASS_ChannelStop(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelpause function as declared in include/bass.h:1059
func BassChannelpause(handle uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	__ret := C.BASS_ChannelPause(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelupdate function as declared in include/bass.h:1060
func BassChannelupdate(handle uint32, length uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	clength, clengthAllocMap := (C.DWORD)(length), cgoAllocsUnknown
	__ret := C.BASS_ChannelUpdate(chandle, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelsetattribute function as declared in include/bass.h:1061
func BassChannelsetattribute(handle uint32, attrib uint32, value float32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cattrib, cattribAllocMap := (C.DWORD)(attrib), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	__ret := C.BASS_ChannelSetAttribute(chandle, cattrib, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cattribAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelgetattribute function as declared in include/bass.h:1062
func BassChannelgetattribute(handle uint32, attrib uint32, value *float32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cattrib, cattribAllocMap := (C.DWORD)(attrib), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (*C.float)(unsafe.Pointer(value)), cgoAllocsUnknown
	__ret := C.BASS_ChannelGetAttribute(chandle, cattrib, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cattribAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelslideattribute function as declared in include/bass.h:1063
func BassChannelslideattribute(handle uint32, attrib uint32, value float32, time uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cattrib, cattribAllocMap := (C.DWORD)(attrib), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	ctime, ctimeAllocMap := (C.DWORD)(time), cgoAllocsUnknown
	__ret := C.BASS_ChannelSlideAttribute(chandle, cattrib, cvalue, ctime)
	runtime.KeepAlive(ctimeAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cattribAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelissliding function as declared in include/bass.h:1064
func BassChannelissliding(handle uint32, attrib uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cattrib, cattribAllocMap := (C.DWORD)(attrib), cgoAllocsUnknown
	__ret := C.BASS_ChannelIsSliding(chandle, cattrib)
	runtime.KeepAlive(cattribAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelsetattributeex function as declared in include/bass.h:1065
func BassChannelsetattributeex(handle uint32, attrib uint32, value unsafe.Pointer, size uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cattrib, cattribAllocMap := (C.DWORD)(attrib), cgoAllocsUnknown
	cvalue, cvalueAllocMap := value, cgoAllocsUnknown
	csize, csizeAllocMap := (C.DWORD)(size), cgoAllocsUnknown
	__ret := C.BASS_ChannelSetAttributeEx(chandle, cattrib, cvalue, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cattribAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelgetattributeex function as declared in include/bass.h:1066
func BassChannelgetattributeex(handle uint32, attrib uint32, value unsafe.Pointer, size uint32) uint32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cattrib, cattribAllocMap := (C.DWORD)(attrib), cgoAllocsUnknown
	cvalue, cvalueAllocMap := value, cgoAllocsUnknown
	csize, csizeAllocMap := (C.DWORD)(size), cgoAllocsUnknown
	__ret := C.BASS_ChannelGetAttributeEx(chandle, cattrib, cvalue, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cattribAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassChannelset3dattributes function as declared in include/bass.h:1067
func BassChannelset3dattributes(handle uint32, mode int32, min float32, max float32, iangle int32, oangle int32, outvol float32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cmode, cmodeAllocMap := (C.int)(mode), cgoAllocsUnknown
	cmin, cminAllocMap := (C.float)(min), cgoAllocsUnknown
	cmax, cmaxAllocMap := (C.float)(max), cgoAllocsUnknown
	ciangle, ciangleAllocMap := (C.int)(iangle), cgoAllocsUnknown
	coangle, coangleAllocMap := (C.int)(oangle), cgoAllocsUnknown
	coutvol, coutvolAllocMap := (C.float)(outvol), cgoAllocsUnknown
	__ret := C.BASS_ChannelSet3DAttributes(chandle, cmode, cmin, cmax, ciangle, coangle, coutvol)
	runtime.KeepAlive(coutvolAllocMap)
	runtime.KeepAlive(coangleAllocMap)
	runtime.KeepAlive(ciangleAllocMap)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(cminAllocMap)
	runtime.KeepAlive(cmodeAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelget3dattributes function as declared in include/bass.h:1068
func BassChannelget3dattributes(handle uint32, mode *uint32, min *float32, max *float32, iangle *uint32, oangle *uint32, outvol []float32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cmode, cmodeAllocMap := (*C.DWORD)(unsafe.Pointer(mode)), cgoAllocsUnknown
	cmin, cminAllocMap := (*C.float)(unsafe.Pointer(min)), cgoAllocsUnknown
	cmax, cmaxAllocMap := (*C.float)(unsafe.Pointer(max)), cgoAllocsUnknown
	ciangle, ciangleAllocMap := (*C.DWORD)(unsafe.Pointer(iangle)), cgoAllocsUnknown
	coangle, coangleAllocMap := (*C.DWORD)(unsafe.Pointer(oangle)), cgoAllocsUnknown
	coutvol, coutvolAllocMap := copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&outvol)))
	__ret := C.BASS_ChannelGet3DAttributes(chandle, cmode, cmin, cmax, ciangle, coangle, coutvol)
	runtime.KeepAlive(coutvolAllocMap)
	runtime.KeepAlive(coangleAllocMap)
	runtime.KeepAlive(ciangleAllocMap)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(cminAllocMap)
	runtime.KeepAlive(cmodeAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelset3dposition function as declared in include/bass.h:1069
func BassChannelset3dposition(handle uint32, pos *Bass3dvector, orient *Bass3dvector, vel *Bass3dvector) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cpos, cposAllocMap := pos.PassRef()
	corient, corientAllocMap := orient.PassRef()
	cvel, cvelAllocMap := vel.PassRef()
	__ret := C.BASS_ChannelSet3DPosition(chandle, cpos, corient, cvel)
	runtime.KeepAlive(cvelAllocMap)
	runtime.KeepAlive(corientAllocMap)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelget3dposition function as declared in include/bass.h:1070
func BassChannelget3dposition(handle uint32, pos *Bass3dvector, orient *Bass3dvector, vel *Bass3dvector) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cpos, cposAllocMap := pos.PassRef()
	corient, corientAllocMap := orient.PassRef()
	cvel, cvelAllocMap := vel.PassRef()
	__ret := C.BASS_ChannelGet3DPosition(chandle, cpos, corient, cvel)
	runtime.KeepAlive(cvelAllocMap)
	runtime.KeepAlive(corientAllocMap)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelgetlength function as declared in include/bass.h:1071
func BassChannelgetlength(handle uint32, mode uint32) uint64 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cmode, cmodeAllocMap := (C.DWORD)(mode), cgoAllocsUnknown
	__ret := C.BASS_ChannelGetLength(chandle, cmode)
	runtime.KeepAlive(cmodeAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// BassChannelsetposition function as declared in include/bass.h:1072
func BassChannelsetposition(handle uint32, pos uint64, mode uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cpos, cposAllocMap := (C.QWORD)(pos), cgoAllocsUnknown
	cmode, cmodeAllocMap := (C.DWORD)(mode), cgoAllocsUnknown
	__ret := C.BASS_ChannelSetPosition(chandle, cpos, cmode)
	runtime.KeepAlive(cmodeAllocMap)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelgetposition function as declared in include/bass.h:1073
func BassChannelgetposition(handle uint32, mode uint32) uint64 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cmode, cmodeAllocMap := (C.DWORD)(mode), cgoAllocsUnknown
	__ret := C.BASS_ChannelGetPosition(chandle, cmode)
	runtime.KeepAlive(cmodeAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// BassChannelgetlevel function as declared in include/bass.h:1074
func BassChannelgetlevel(handle uint32) uint32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	__ret := C.BASS_ChannelGetLevel(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassChannelgetlevelex function as declared in include/bass.h:1075
func BassChannelgetlevelex(handle uint32, levels *float32, length float32, flags uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	clevels, clevelsAllocMap := (*C.float)(unsafe.Pointer(levels)), cgoAllocsUnknown
	clength, clengthAllocMap := (C.float)(length), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	__ret := C.BASS_ChannelGetLevelEx(chandle, clevels, clength, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(clevelsAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelgetdata function as declared in include/bass.h:1076
func BassChannelgetdata(handle uint32, buffer unsafe.Pointer, length uint32) uint32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := buffer, cgoAllocsUnknown
	clength, clengthAllocMap := (C.DWORD)(length), cgoAllocsUnknown
	__ret := C.BASS_ChannelGetData(chandle, cbuffer, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassChannelsetsync function as declared in include/bass.h:1077
func BassChannelsetsync(handle uint32, kind uint32, param uint64, proc Syncproc, user unsafe.Pointer) uint32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.DWORD)(kind), cgoAllocsUnknown
	cparam, cparamAllocMap := (C.QWORD)(param), cgoAllocsUnknown
	cproc, cprocAllocMap := proc.PassRef()
	cuser, cuserAllocMap := user, cgoAllocsUnknown
	__ret := C.BASS_ChannelSetSync(chandle, ckind, cparam, cproc, cuser)
	runtime.KeepAlive(cuserAllocMap)
	runtime.KeepAlive(cprocAllocMap)
	runtime.KeepAlive(cparamAllocMap)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassChannelremovesync function as declared in include/bass.h:1078
func BassChannelremovesync(handle uint32, sync uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	csync, csyncAllocMap := (C.HSYNC)(sync), cgoAllocsUnknown
	__ret := C.BASS_ChannelRemoveSync(chandle, csync)
	runtime.KeepAlive(csyncAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelsetlink function as declared in include/bass.h:1079
func BassChannelsetlink(handle uint32, _chan uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	c_chan, c_chanAllocMap := (C.DWORD)(_chan), cgoAllocsUnknown
	__ret := C.BASS_ChannelSetLink(chandle, c_chan)
	runtime.KeepAlive(c_chanAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelremovelink function as declared in include/bass.h:1080
func BassChannelremovelink(handle uint32, _chan uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	c_chan, c_chanAllocMap := (C.DWORD)(_chan), cgoAllocsUnknown
	__ret := C.BASS_ChannelRemoveLink(chandle, c_chan)
	runtime.KeepAlive(c_chanAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelsetdsp function as declared in include/bass.h:1081
func BassChannelsetdsp(handle uint32, proc Dspproc, user unsafe.Pointer, priority int32) uint32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cproc, cprocAllocMap := proc.PassRef()
	cuser, cuserAllocMap := user, cgoAllocsUnknown
	cpriority, cpriorityAllocMap := (C.int)(priority), cgoAllocsUnknown
	__ret := C.BASS_ChannelSetDSP(chandle, cproc, cuser, cpriority)
	runtime.KeepAlive(cpriorityAllocMap)
	runtime.KeepAlive(cuserAllocMap)
	runtime.KeepAlive(cprocAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassChannelremovedsp function as declared in include/bass.h:1082
func BassChannelremovedsp(handle uint32, dsp uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cdsp, cdspAllocMap := (C.HDSP)(dsp), cgoAllocsUnknown
	__ret := C.BASS_ChannelRemoveDSP(chandle, cdsp)
	runtime.KeepAlive(cdspAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassChannelsetfx function as declared in include/bass.h:1083
func BassChannelsetfx(handle uint32, kind uint32, priority int32) uint32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.DWORD)(kind), cgoAllocsUnknown
	cpriority, cpriorityAllocMap := (C.int)(priority), cgoAllocsUnknown
	__ret := C.BASS_ChannelSetFX(chandle, ckind, cpriority)
	runtime.KeepAlive(cpriorityAllocMap)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassChannelremovefx function as declared in include/bass.h:1084
func BassChannelremovefx(handle uint32, fx uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cfx, cfxAllocMap := (C.HFX)(fx), cgoAllocsUnknown
	__ret := C.BASS_ChannelRemoveFX(chandle, cfx)
	runtime.KeepAlive(cfxAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassFxsetparameters function as declared in include/bass.h:1086
func BassFxsetparameters(handle uint32, params unsafe.Pointer) int32 {
	chandle, chandleAllocMap := (C.HFX)(handle), cgoAllocsUnknown
	cparams, cparamsAllocMap := params, cgoAllocsUnknown
	__ret := C.BASS_FXSetParameters(chandle, cparams)
	runtime.KeepAlive(cparamsAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassFxgetparameters function as declared in include/bass.h:1087
func BassFxgetparameters(handle uint32, params unsafe.Pointer) int32 {
	chandle, chandleAllocMap := (C.HFX)(handle), cgoAllocsUnknown
	cparams, cparamsAllocMap := params, cgoAllocsUnknown
	__ret := C.BASS_FXGetParameters(chandle, cparams)
	runtime.KeepAlive(cparamsAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassFxsetpriority function as declared in include/bass.h:1088
func BassFxsetpriority(handle uint32, priority int32) int32 {
	chandle, chandleAllocMap := (C.HFX)(handle), cgoAllocsUnknown
	cpriority, cpriorityAllocMap := (C.int)(priority), cgoAllocsUnknown
	__ret := C.BASS_FXSetPriority(chandle, cpriority)
	runtime.KeepAlive(cpriorityAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassFxreset function as declared in include/bass.h:1089
func BassFxreset(handle uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	__ret := C.BASS_FXReset(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassEncodeGetversion function as declared in include/bassenc.h:144
func BassEncodeGetversion() uint32 {
	__ret := C.BASS_Encode_GetVersion()
	__v := (uint32)(__ret)
	return __v
}

// BassEncodeStart function as declared in include/bassenc.h:146
func BassEncodeStart(handle uint32, cmdline string, flags uint32, proc Encodeproc, user unsafe.Pointer) Hencode {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	ccmdline, ccmdlineAllocMap := unpackPCharString(cmdline)
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	cproc, cprocAllocMap := proc.PassRef()
	cuser, cuserAllocMap := user, cgoAllocsUnknown
	__ret := C.BASS_Encode_Start(chandle, ccmdline, cflags, cproc, cuser)
	runtime.KeepAlive(cuserAllocMap)
	runtime.KeepAlive(cprocAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(ccmdlineAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (Hencode)(__ret)
	return __v
}

// BassEncodeStartlimit function as declared in include/bassenc.h:147
func BassEncodeStartlimit(handle uint32, cmdline string, flags uint32, proc Encodeproc, user unsafe.Pointer, limit uint32) Hencode {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	ccmdline, ccmdlineAllocMap := unpackPCharString(cmdline)
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	cproc, cprocAllocMap := proc.PassRef()
	cuser, cuserAllocMap := user, cgoAllocsUnknown
	climit, climitAllocMap := (C.DWORD)(limit), cgoAllocsUnknown
	__ret := C.BASS_Encode_StartLimit(chandle, ccmdline, cflags, cproc, cuser, climit)
	runtime.KeepAlive(climitAllocMap)
	runtime.KeepAlive(cuserAllocMap)
	runtime.KeepAlive(cprocAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(ccmdlineAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (Hencode)(__ret)
	return __v
}

// BassEncodeStartuser function as declared in include/bassenc.h:148
func BassEncodeStartuser(handle uint32, filename string, flags uint32, proc Encoderproc, user unsafe.Pointer) Hencode {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cfilename, cfilenameAllocMap := unpackPCharString(filename)
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	cproc, cprocAllocMap := proc.PassRef()
	cuser, cuserAllocMap := user, cgoAllocsUnknown
	__ret := C.BASS_Encode_StartUser(chandle, cfilename, cflags, cproc, cuser)
	runtime.KeepAlive(cuserAllocMap)
	runtime.KeepAlive(cprocAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cfilenameAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (Hencode)(__ret)
	return __v
}

// BassEncodeAddchunk function as declared in include/bassenc.h:149
func BassEncodeAddchunk(handle Hencode, id string, buffer unsafe.Pointer, length uint32) int32 {
	chandle, chandleAllocMap := (C.HENCODE)(handle), cgoAllocsUnknown
	cid, cidAllocMap := unpackPCharString(id)
	cbuffer, cbufferAllocMap := buffer, cgoAllocsUnknown
	clength, clengthAllocMap := (C.DWORD)(length), cgoAllocsUnknown
	__ret := C.BASS_Encode_AddChunk(chandle, cid, cbuffer, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(cidAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassEncodeIsactive function as declared in include/bassenc.h:150
func BassEncodeIsactive(handle uint32) uint32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	__ret := C.BASS_Encode_IsActive(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassEncodeStop function as declared in include/bassenc.h:151
func BassEncodeStop(handle uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	__ret := C.BASS_Encode_Stop(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassEncodeStopex function as declared in include/bassenc.h:152
func BassEncodeStopex(handle uint32, queue int32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cqueue, cqueueAllocMap := (C.BOOL)(queue), cgoAllocsUnknown
	__ret := C.BASS_Encode_StopEx(chandle, cqueue)
	runtime.KeepAlive(cqueueAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassEncodeSetpaused function as declared in include/bassenc.h:153
func BassEncodeSetpaused(handle uint32, paused int32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cpaused, cpausedAllocMap := (C.BOOL)(paused), cgoAllocsUnknown
	__ret := C.BASS_Encode_SetPaused(chandle, cpaused)
	runtime.KeepAlive(cpausedAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassEncodeWrite function as declared in include/bassenc.h:154
func BassEncodeWrite(handle uint32, buffer unsafe.Pointer, length uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := buffer, cgoAllocsUnknown
	clength, clengthAllocMap := (C.DWORD)(length), cgoAllocsUnknown
	__ret := C.BASS_Encode_Write(chandle, cbuffer, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassEncodeSetnotify function as declared in include/bassenc.h:155
func BassEncodeSetnotify(handle uint32, proc Encodenotifyproc, user unsafe.Pointer) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cproc, cprocAllocMap := proc.PassRef()
	cuser, cuserAllocMap := user, cgoAllocsUnknown
	__ret := C.BASS_Encode_SetNotify(chandle, cproc, cuser)
	runtime.KeepAlive(cuserAllocMap)
	runtime.KeepAlive(cprocAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassEncodeGetcount function as declared in include/bassenc.h:156
func BassEncodeGetcount(handle uint32, count uint32) uint64 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.DWORD)(count), cgoAllocsUnknown
	__ret := C.BASS_Encode_GetCount(chandle, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// BassEncodeSetchannel function as declared in include/bassenc.h:157
func BassEncodeSetchannel(handle uint32, channel uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cchannel, cchannelAllocMap := (C.DWORD)(channel), cgoAllocsUnknown
	__ret := C.BASS_Encode_SetChannel(chandle, cchannel)
	runtime.KeepAlive(cchannelAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassEncodeGetchannel function as declared in include/bassenc.h:158
func BassEncodeGetchannel(handle Hencode) uint32 {
	chandle, chandleAllocMap := (C.HENCODE)(handle), cgoAllocsUnknown
	__ret := C.BASS_Encode_GetChannel(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassEncodeUseroutput function as declared in include/bassenc.h:159
func BassEncodeUseroutput(handle uint32, offset uint64, buffer unsafe.Pointer, length uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	coffset, coffsetAllocMap := (C.QWORD)(offset), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := buffer, cgoAllocsUnknown
	clength, clengthAllocMap := (C.DWORD)(length), cgoAllocsUnknown
	__ret := C.BASS_Encode_UserOutput(chandle, coffset, cbuffer, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(coffsetAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassEncodeCastinit function as declared in include/bassenc.h:174
func BassEncodeCastinit(handle Hencode, server string, pass string, content string, name string, url string, genre string, desc string, headers string, bitrate uint32, pub int32) int32 {
	chandle, chandleAllocMap := (C.HENCODE)(handle), cgoAllocsUnknown
	cserver, cserverAllocMap := unpackPCharString(server)
	cpass, cpassAllocMap := unpackPCharString(pass)
	ccontent, ccontentAllocMap := unpackPCharString(content)
	cname, cnameAllocMap := unpackPCharString(name)
	curl, curlAllocMap := unpackPCharString(url)
	cgenre, cgenreAllocMap := unpackPCharString(genre)
	cdesc, cdescAllocMap := unpackPCharString(desc)
	cheaders, cheadersAllocMap := unpackPCharString(headers)
	cbitrate, cbitrateAllocMap := (C.DWORD)(bitrate), cgoAllocsUnknown
	cpub, cpubAllocMap := (C.BOOL)(pub), cgoAllocsUnknown
	__ret := C.BASS_Encode_CastInit(chandle, cserver, cpass, ccontent, cname, curl, cgenre, cdesc, cheaders, cbitrate, cpub)
	runtime.KeepAlive(cpubAllocMap)
	runtime.KeepAlive(cbitrateAllocMap)
	runtime.KeepAlive(cheadersAllocMap)
	runtime.KeepAlive(cdescAllocMap)
	runtime.KeepAlive(cgenreAllocMap)
	runtime.KeepAlive(curlAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(ccontentAllocMap)
	runtime.KeepAlive(cpassAllocMap)
	runtime.KeepAlive(cserverAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassEncodeCastsettitle function as declared in include/bassenc.h:175
func BassEncodeCastsettitle(handle Hencode, title string, url string) int32 {
	chandle, chandleAllocMap := (C.HENCODE)(handle), cgoAllocsUnknown
	ctitle, ctitleAllocMap := unpackPCharString(title)
	curl, curlAllocMap := unpackPCharString(url)
	__ret := C.BASS_Encode_CastSetTitle(chandle, ctitle, curl)
	runtime.KeepAlive(curlAllocMap)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassEncodeCastsendmeta function as declared in include/bassenc.h:176
func BassEncodeCastsendmeta(handle Hencode, kind uint32, data unsafe.Pointer, length uint32) int32 {
	chandle, chandleAllocMap := (C.HENCODE)(handle), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.DWORD)(kind), cgoAllocsUnknown
	cdata, cdataAllocMap := data, cgoAllocsUnknown
	clength, clengthAllocMap := (C.DWORD)(length), cgoAllocsUnknown
	__ret := C.BASS_Encode_CastSendMeta(chandle, ckind, cdata, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassEncodeCastgetstats function as declared in include/bassenc.h:177
func BassEncodeCastgetstats(handle Hencode, kind uint32, pass string) string {
	chandle, chandleAllocMap := (C.HENCODE)(handle), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.DWORD)(kind), cgoAllocsUnknown
	cpass, cpassAllocMap := unpackPCharString(pass)
	__ret := C.BASS_Encode_CastGetStats(chandle, ckind, cpass)
	runtime.KeepAlive(cpassAllocMap)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := packPCharString(__ret)
	return __v
}

// BassEncodeServerinit function as declared in include/bassenc.h:179
func BassEncodeServerinit(handle Hencode, port string, buffer uint32, burst uint32, flags uint32, proc Encodeclientproc, user unsafe.Pointer) uint32 {
	chandle, chandleAllocMap := (C.HENCODE)(handle), cgoAllocsUnknown
	cport, cportAllocMap := unpackPCharString(port)
	cbuffer, cbufferAllocMap := (C.DWORD)(buffer), cgoAllocsUnknown
	cburst, cburstAllocMap := (C.DWORD)(burst), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	cproc, cprocAllocMap := proc.PassRef()
	cuser, cuserAllocMap := user, cgoAllocsUnknown
	__ret := C.BASS_Encode_ServerInit(chandle, cport, cbuffer, cburst, cflags, cproc, cuser)
	runtime.KeepAlive(cuserAllocMap)
	runtime.KeepAlive(cprocAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cburstAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(cportAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassEncodeServerkick function as declared in include/bassenc.h:180
func BassEncodeServerkick(handle Hencode, client string) int32 {
	chandle, chandleAllocMap := (C.HENCODE)(handle), cgoAllocsUnknown
	cclient, cclientAllocMap := unpackPCharString(client)
	__ret := C.BASS_Encode_ServerKick(chandle, cclient)
	runtime.KeepAlive(cclientAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassEncodeMp3Getversion function as declared in include/bassenc_mp3.h:25
func BassEncodeMp3Getversion() uint32 {
	__ret := C.BASS_Encode_MP3_GetVersion()
	__v := (uint32)(__ret)
	return __v
}

// BassEncodeMp3Start function as declared in include/bassenc_mp3.h:27
func BassEncodeMp3Start(handle uint32, options string, flags uint32, proc Encodeprocex, user unsafe.Pointer) Hencode {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	coptions, coptionsAllocMap := unpackPCharString(options)
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	cproc, cprocAllocMap := proc.PassRef()
	cuser, cuserAllocMap := user, cgoAllocsUnknown
	__ret := C.BASS_Encode_MP3_Start(chandle, coptions, cflags, cproc, cuser)
	runtime.KeepAlive(cuserAllocMap)
	runtime.KeepAlive(cprocAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(coptionsAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (Hencode)(__ret)
	return __v
}

// BassEncodeMp3Startfile function as declared in include/bassenc_mp3.h:28
func BassEncodeMp3Startfile(handle uint32, options string, flags uint32, filename string) Hencode {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	coptions, coptionsAllocMap := unpackPCharString(options)
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	cfilename, cfilenameAllocMap := unpackPCharString(filename)
	__ret := C.BASS_Encode_MP3_StartFile(chandle, coptions, cflags, cfilename)
	runtime.KeepAlive(cfilenameAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(coptionsAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (Hencode)(__ret)
	return __v
}

// BassMixerGetversion function as declared in include/bassmix.h:86
func BassMixerGetversion() uint32 {
	__ret := C.BASS_Mixer_GetVersion()
	__v := (uint32)(__ret)
	return __v
}

// BassMixerStreamcreate function as declared in include/bassmix.h:88
func BassMixerStreamcreate(freq uint32, chans uint32, flags uint32) uint32 {
	cfreq, cfreqAllocMap := (C.DWORD)(freq), cgoAllocsUnknown
	cchans, cchansAllocMap := (C.DWORD)(chans), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	__ret := C.BASS_Mixer_StreamCreate(cfreq, cchans, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cchansAllocMap)
	runtime.KeepAlive(cfreqAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassMixerStreamaddchannel function as declared in include/bassmix.h:89
func BassMixerStreamaddchannel(handle uint32, channel uint32, flags uint32) int32 {
	chandle, chandleAllocMap := (C.HSTREAM)(handle), cgoAllocsUnknown
	cchannel, cchannelAllocMap := (C.DWORD)(channel), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	__ret := C.BASS_Mixer_StreamAddChannel(chandle, cchannel, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cchannelAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassMixerStreamaddchannelex function as declared in include/bassmix.h:90
func BassMixerStreamaddchannelex(handle uint32, channel uint32, flags uint32, start uint64, length uint64) int32 {
	chandle, chandleAllocMap := (C.HSTREAM)(handle), cgoAllocsUnknown
	cchannel, cchannelAllocMap := (C.DWORD)(channel), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	cstart, cstartAllocMap := (C.QWORD)(start), cgoAllocsUnknown
	clength, clengthAllocMap := (C.QWORD)(length), cgoAllocsUnknown
	__ret := C.BASS_Mixer_StreamAddChannelEx(chandle, cchannel, cflags, cstart, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cstartAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cchannelAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassMixerStreamgetchannels function as declared in include/bassmix.h:91
func BassMixerStreamgetchannels(handle uint32, channels *uint32, count uint32) uint32 {
	chandle, chandleAllocMap := (C.HSTREAM)(handle), cgoAllocsUnknown
	cchannels, cchannelsAllocMap := (*C.DWORD)(unsafe.Pointer(channels)), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.DWORD)(count), cgoAllocsUnknown
	__ret := C.BASS_Mixer_StreamGetChannels(chandle, cchannels, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cchannelsAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassMixerChannelgetmixer function as declared in include/bassmix.h:93
func BassMixerChannelgetmixer(handle uint32) uint32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	__ret := C.BASS_Mixer_ChannelGetMixer(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassMixerChannelflags function as declared in include/bassmix.h:94
func BassMixerChannelflags(handle uint32, flags uint32, mask uint32) uint32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	cmask, cmaskAllocMap := (C.DWORD)(mask), cgoAllocsUnknown
	__ret := C.BASS_Mixer_ChannelFlags(chandle, cflags, cmask)
	runtime.KeepAlive(cmaskAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassMixerChannelremove function as declared in include/bassmix.h:95
func BassMixerChannelremove(handle uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	__ret := C.BASS_Mixer_ChannelRemove(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassMixerChannelsetposition function as declared in include/bassmix.h:96
func BassMixerChannelsetposition(handle uint32, pos uint64, mode uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cpos, cposAllocMap := (C.QWORD)(pos), cgoAllocsUnknown
	cmode, cmodeAllocMap := (C.DWORD)(mode), cgoAllocsUnknown
	__ret := C.BASS_Mixer_ChannelSetPosition(chandle, cpos, cmode)
	runtime.KeepAlive(cmodeAllocMap)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassMixerChannelgetposition function as declared in include/bassmix.h:97
func BassMixerChannelgetposition(handle uint32, mode uint32) uint64 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cmode, cmodeAllocMap := (C.DWORD)(mode), cgoAllocsUnknown
	__ret := C.BASS_Mixer_ChannelGetPosition(chandle, cmode)
	runtime.KeepAlive(cmodeAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// BassMixerChannelgetpositionex function as declared in include/bassmix.h:98
func BassMixerChannelgetpositionex(channel uint32, mode uint32, delay uint32) uint64 {
	cchannel, cchannelAllocMap := (C.DWORD)(channel), cgoAllocsUnknown
	cmode, cmodeAllocMap := (C.DWORD)(mode), cgoAllocsUnknown
	cdelay, cdelayAllocMap := (C.DWORD)(delay), cgoAllocsUnknown
	__ret := C.BASS_Mixer_ChannelGetPositionEx(cchannel, cmode, cdelay)
	runtime.KeepAlive(cdelayAllocMap)
	runtime.KeepAlive(cmodeAllocMap)
	runtime.KeepAlive(cchannelAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// BassMixerChannelgetlevel function as declared in include/bassmix.h:99
func BassMixerChannelgetlevel(handle uint32) uint32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	__ret := C.BASS_Mixer_ChannelGetLevel(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassMixerChannelgetlevelex function as declared in include/bassmix.h:100
func BassMixerChannelgetlevelex(handle uint32, levels *float32, length float32, flags uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	clevels, clevelsAllocMap := (*C.float)(unsafe.Pointer(levels)), cgoAllocsUnknown
	clength, clengthAllocMap := (C.float)(length), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	__ret := C.BASS_Mixer_ChannelGetLevelEx(chandle, clevels, clength, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(clevelsAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassMixerChannelgetdata function as declared in include/bassmix.h:101
func BassMixerChannelgetdata(handle uint32, buffer unsafe.Pointer, length uint32) uint32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := buffer, cgoAllocsUnknown
	clength, clengthAllocMap := (C.DWORD)(length), cgoAllocsUnknown
	__ret := C.BASS_Mixer_ChannelGetData(chandle, cbuffer, clength)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassMixerChannelsetsync function as declared in include/bassmix.h:102
func BassMixerChannelsetsync(handle uint32, kind uint32, param uint64, proc Syncproc, user unsafe.Pointer) uint32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.DWORD)(kind), cgoAllocsUnknown
	cparam, cparamAllocMap := (C.QWORD)(param), cgoAllocsUnknown
	cproc, cprocAllocMap := proc.PassRef()
	cuser, cuserAllocMap := user, cgoAllocsUnknown
	__ret := C.BASS_Mixer_ChannelSetSync(chandle, ckind, cparam, cproc, cuser)
	runtime.KeepAlive(cuserAllocMap)
	runtime.KeepAlive(cprocAllocMap)
	runtime.KeepAlive(cparamAllocMap)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassMixerChannelremovesync function as declared in include/bassmix.h:103
func BassMixerChannelremovesync(channel uint32, sync uint32) int32 {
	cchannel, cchannelAllocMap := (C.DWORD)(channel), cgoAllocsUnknown
	csync, csyncAllocMap := (C.HSYNC)(sync), cgoAllocsUnknown
	__ret := C.BASS_Mixer_ChannelRemoveSync(cchannel, csync)
	runtime.KeepAlive(csyncAllocMap)
	runtime.KeepAlive(cchannelAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassMixerChannelsetmatrix function as declared in include/bassmix.h:104
func BassMixerChannelsetmatrix(handle uint32, matrix unsafe.Pointer) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cmatrix, cmatrixAllocMap := matrix, cgoAllocsUnknown
	__ret := C.BASS_Mixer_ChannelSetMatrix(chandle, cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassMixerChannelsetmatrixex function as declared in include/bassmix.h:105
func BassMixerChannelsetmatrixex(handle uint32, matrix unsafe.Pointer, time float32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cmatrix, cmatrixAllocMap := matrix, cgoAllocsUnknown
	ctime, ctimeAllocMap := (C.float)(time), cgoAllocsUnknown
	__ret := C.BASS_Mixer_ChannelSetMatrixEx(chandle, cmatrix, ctime)
	runtime.KeepAlive(ctimeAllocMap)
	runtime.KeepAlive(cmatrixAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassMixerChannelgetmatrix function as declared in include/bassmix.h:106
func BassMixerChannelgetmatrix(handle uint32, matrix unsafe.Pointer) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	cmatrix, cmatrixAllocMap := matrix, cgoAllocsUnknown
	__ret := C.BASS_Mixer_ChannelGetMatrix(chandle, cmatrix)
	runtime.KeepAlive(cmatrixAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassMixerChannelsetenvelope function as declared in include/bassmix.h:107
func BassMixerChannelsetenvelope(handle uint32, kind uint32, nodes *BassMixerNode, count uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.DWORD)(kind), cgoAllocsUnknown
	cnodes, cnodesAllocMap := nodes.PassRef()
	ccount, ccountAllocMap := (C.DWORD)(count), cgoAllocsUnknown
	__ret := C.BASS_Mixer_ChannelSetEnvelope(chandle, ckind, cnodes, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cnodesAllocMap)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassMixerChannelsetenvelopepos function as declared in include/bassmix.h:108
func BassMixerChannelsetenvelopepos(handle uint32, kind uint32, pos uint64) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.DWORD)(kind), cgoAllocsUnknown
	cpos, cposAllocMap := (C.QWORD)(pos), cgoAllocsUnknown
	__ret := C.BASS_Mixer_ChannelSetEnvelopePos(chandle, ckind, cpos)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassMixerChannelgetenvelopepos function as declared in include/bassmix.h:109
func BassMixerChannelgetenvelopepos(handle uint32, kind uint32, value *float32) uint64 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.DWORD)(kind), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (*C.float)(unsafe.Pointer(value)), cgoAllocsUnknown
	__ret := C.BASS_Mixer_ChannelGetEnvelopePos(chandle, ckind, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// BassSplitStreamcreate function as declared in include/bassmix.h:111
func BassSplitStreamcreate(channel uint32, flags uint32, chanmap *int32) uint32 {
	cchannel, cchannelAllocMap := (C.DWORD)(channel), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.DWORD)(flags), cgoAllocsUnknown
	cchanmap, cchanmapAllocMap := (*C.int)(unsafe.Pointer(chanmap)), cgoAllocsUnknown
	__ret := C.BASS_Split_StreamCreate(cchannel, cflags, cchanmap)
	runtime.KeepAlive(cchanmapAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cchannelAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassSplitStreamgetsource function as declared in include/bassmix.h:112
func BassSplitStreamgetsource(handle uint32) uint32 {
	chandle, chandleAllocMap := (C.HSTREAM)(handle), cgoAllocsUnknown
	__ret := C.BASS_Split_StreamGetSource(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassSplitStreamgetsplits function as declared in include/bassmix.h:113
func BassSplitStreamgetsplits(handle uint32, splits *uint32, count uint32) uint32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	csplits, csplitsAllocMap := (*C.HSTREAM)(unsafe.Pointer(splits)), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.DWORD)(count), cgoAllocsUnknown
	__ret := C.BASS_Split_StreamGetSplits(chandle, csplits, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(csplitsAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BassSplitStreamreset function as declared in include/bassmix.h:114
func BassSplitStreamreset(handle uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	__ret := C.BASS_Split_StreamReset(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassSplitStreamresetex function as declared in include/bassmix.h:115
func BassSplitStreamresetex(handle uint32, offset uint32) int32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	coffset, coffsetAllocMap := (C.DWORD)(offset), cgoAllocsUnknown
	__ret := C.BASS_Split_StreamResetEx(chandle, coffset)
	runtime.KeepAlive(coffsetAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	__v := (int32)(__ret)
	return __v
}

// BassSplitStreamgetavailable function as declared in include/bassmix.h:116
func BassSplitStreamgetavailable(handle uint32) uint32 {
	chandle, chandleAllocMap := (C.DWORD)(handle), cgoAllocsUnknown
	__ret := C.BASS_Split_StreamGetAvailable(chandle)
	runtime.KeepAlive(chandleAllocMap)
	__v := (uint32)(__ret)
	return __v
}
